# Tilly

## Skill Information
Name information: Tilly
Invocation Name: open tilly

Intent Schema
{
  "intents": [
    {
      "slots": [
        {
          "name": "NumberOne",
          "type": "LIST_OF_NUMBERS"
        },
        {
          "name": "NumberTwo",
          "type": "LIST_OF_NUMBERS"
        },
        {
          "name": "Operand",
          "type": "LIST_OF_OPERATORS"
        }
      ],
      "intent": "MathIsIntentPlus"
    },
    {
      "slots": [
        {
          "name": "NumberOne",
          "type": "LIST_OF_NUMBERS"
        },
        {
          "name": "NumberTwo",
          "type": "LIST_OF_NUMBERS"
        },
        {
          "name": "Operand",
          "type": "LIST_OF_OPERATORS"
        }
      ],
      "intent": "MathIsIntentMinus"
    },
    {
      "intent": "AMAZON.HelpIntent"
    }
  ]
}

## Custom Slot Type 1:
###Enter Type:
LIST_OF_NUMBERS

### Enter Values:
one
two

## Custom Slot Type 2:
### Enter Type:
LIST_OF_OPERATORS

### Enter Values:
plus
add
take-away
minus
subtract
divide
divided

## Sample Utterances
MathIsIntentPlus What is {NumberOne} add {NumberTwo}
MathIsIntentPlus What is {NumberOne} plus {NumberTwo}
MathIsIntentMinus What is {NumberOne} minus {NumberTwo}
MathIsIntentMinus What is {NumberOne} take-away {NumberTwo}

# Lamda Management Console
'use strict';

/** Tilly
 * This sample demonstrates a simple skill built with the Amazon Alexa Skills Kit.
 * The Intent Schema, Custom Slots, and Sample Utterances for this skill, as well as
 * testing instructions are located at http://amzn.to/1LzFrj6
 *
 * For additional samples, visit the Alexa Skills Kit Getting Started guide at
 * http://amzn.to/1LGWsLG
 */


// --------------- Helpers that build all of the responses -----------------------

function buildSpeechletResponse(title, output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: 'PlainText',
            text: output,
        },
        card: {
            type: 'Simple',
            title: `SessionSpeechlet - ${title}`,
            content: `SessionSpeechlet - ${output}`,
        },
        reprompt: {
            outputSpeech: {
                type: 'PlainText',
                text: repromptText,
            },
        },
        shouldEndSession,
    };
}

function buildResponse(sessionAttributes, speechletResponse) {
    return {
        version: '1.0',
        sessionAttributes,
        response: speechletResponse,
    };
}


// --------------- Functions that control the skill's behavior -----------------------

function getWelcomeResponse(callback) {
    // If we wanted to initialize the session to have some attributes we could add those here.
    const sessionAttributes = {};
    const cardTitle = 'Math Chat';
    const speechOutput = 'Echo .. open .. David';
    const repromptText = "";
    const shouldEndSession = false;
    callback(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

function handleSessionEndRequest(callback) {
    const cardTitle = 'Session Ended';
    const speechOutput = 'Thanks for visiting. Have a nice day!';
    const shouldEndSession = true;
    callback({}, buildSpeechletResponse(cardTitle, speechOutput, null, shouldEndSession));
}

function createOperandAttributes(chosenOperand) {
    return {
        chosenOperand
    };
}

function createPlusAttributes(plusInSession) {
    return {
        plusInSession
    };
}

function createMinusAttributes(minusInSession) {
    return {
        minusInSession
    };
}

/**
 * Name
 */

function plusInSession(intent, session, callback) {
    const cardTitle = intent.name;
    const numberSlot = intent.slots.NumberOne;
    const numberSlotTwo = intent.slots.NumberTwo;
    const operand = intent.slots.Operand;

    let repromptText = '';
    let sessionAttributes = {};
    const shouldEndSession = false;
    let speechOutput = '';

    const chosenName = numberSlot.value;
    const chosenNameTwo = numberSlotTwo.value;
    const chosenOperand = operand.value;

    const operandArray = [
        'plus'
    ];

    let randomNumber = Math.floor(Math.random()*operandArray.length);
    let randomOperator = operandArray[randomNumber];
    let randomNumberOne = Math.floor(Math.random() * 10) + 1;
    let randomNumberTwo = Math.floor(Math.random() * 20) + 1;

    sessionAttributes = createOperandAttributes(chosenOperand);

    let chosenNameThree = (parseInt(chosenName, 10) + parseInt(chosenNameTwo, 10));
    chosenNameThree = chosenNameThree.toFixed(0);
    speechOutput = `equals ${chosenNameThree} ... ` +  `What is ${randomNumberOne} ... ${randomOperator} ... ${randomNumberTwo}?`;


    
    callback(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}


function minusInSession(intent, session, callback) {
    const cardTitle = intent.name;
    const numberSlot = intent.slots.NumberOne;
    const numberSlotTwo = intent.slots.NumberTwo;
    const operand = intent.slots.Operand;

    let repromptText = '';
    let sessionAttributes = {};
    const shouldEndSession = false;
    let speechOutput = '';

    const chosenName = numberSlot.value;
    const chosenNameTwo = numberSlotTwo.value;
    const chosenOperand = operand.value;

    const operandArray = [
        'plus'
    ];

    let randomNumber = Math.floor(Math.random()*operandArray.length);
    let randomOperator = operandArray[randomNumber];
    let randomNumberOne = Math.floor(Math.random() * 10) + 1;
    let randomNumberTwo = Math.floor(Math.random() * 20) + 1;

    sessionAttributes = createOperandAttributes(chosenOperand);

    let chosenNameThree = (parseInt(chosenName, 10) - parseInt(chosenNameTwo, 10));
    chosenNameThree = chosenNameThree.toFixed(0);
    speechOutput = `equals ${chosenNameThree} ... ` +  `What is ${randomNumberOne} ... ${randomOperator} ... ${randomNumberTwo}?`;

    callback(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}



// --------------- Events -----------------------

/**
 * Called when the session starts.
 */
function onSessionStarted(sessionStartedRequest, session) {
    console.log(`onSessionStarted requestId=${sessionStartedRequest.requestId}, sessionId=${session.sessionId}`);
}
/**
 * Called when the user launches the skill without specifying what they want.
 */
function onLaunch(launchRequest, session, callback) {
    console.log(`onLaunch requestId=${launchRequest.requestId}, sessionId=${session.sessionId}`);
    // Dispatch to your skill's launch.
    getWelcomeResponse(callback);
}

/**
 * Called when the user specifies an intent for this skill.
 */
function onIntent(intentRequest, session, callback) {
    console.log(`onIntent requestId=${intentRequest.requestId}, sessionId=${session.sessionId}`);

    const intent = intentRequest.intent;
    const intentName = intentRequest.intent.name;

    if (intentName === 'MathIsIntentPlus') {
        plusInSession(intent, session, callback);
    }

    if (intentName === 'MathIsIntentMinus') {
        minusInSession(intent, session, callback);
    }

}

/**
 * Called when the user ends the session.
 * Is not called when the skill returns shouldEndSession=true.
 */
function onSessionEnded(sessionEndedRequest, session) {
    console.log(`onSessionEnded requestId=${sessionEndedRequest.requestId}, sessionId=${session.sessionId}`);
    // Add cleanup logic here
}


// --------------- Main handler -----------------------

// Route the incoming request based on type (LaunchRequest, IntentRequest,
// etc.) The JSON body of the request is provided in the event parameter.
exports.handler = (event, context, callback) => {
    try {
        console.log(`event.session.application.applicationId=${event.session.application.applicationId}`);

        /**
         * Uncomment this if statement and populate with your skill's application ID to
         * prevent someone else from configuring a skill that sends requests to this function.
         */
        /*
        if (event.session.application.applicationId !== 'amzn1.echo-sdk-ams.app.[unique-value-here]') {
             callback('Invalid Application ID');
        }
        */

        if (event.session.new) {
            onSessionStarted({ requestId: event.request.requestId }, event.session);
        }

        if (event.request.type === 'LaunchRequest') {
            onLaunch(event.request,
                event.session,
                (sessionAttributes, speechletResponse) => {
                    callback(null, buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === 'IntentRequest') {
            onIntent(event.request,
                event.session,
                (sessionAttributes, speechletResponse) => {
                    callback(null, buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === 'SessionEndedRequest') {
            // onSessionEnded(event.request, event.session);
            // callback();
        }
    } catch (err) {
        callback(err);
    }
};
